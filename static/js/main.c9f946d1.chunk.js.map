{"version":3,"sources":["Components/Statistics/Statistics.module.css","Components/Section/Section.module.css","Components/FeedbackOptions/FeedbackOptions.module.css","Components/Notification/Notification.module.css","Components/App.module.css","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.js","Components/Section/Section.js","Components/Notification/Notification.js","Components/App.js","index.js"],"names":["module","exports","makeFirstLetterBig","str","toUpperCase","slice","FeedbackOptions","options","clickFeedback","map","option","type","onClick","className","styles","btn","Statistics","good","neutral","bad","total","positivePercentage","list","listItem","quantity","Section","title","children","section","Notification","message","text","defaultProps","App","useState","setGood","setNeutral","setBad","countTotalFeedback","s","app","addFeedback","value","toLowerCase","state","result","Math","floor","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9f946d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3JbXd\",\"listItem\":\"Statistics_listItem__PjzJP\",\"quantity\":\"Statistics_quantity__3MLwN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1KR2O\",\"title\":\"Section_title__3bjuk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__2ptT0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__3lLl9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__FLVbV\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, clickFeedback }) => {\r\n    return options.map((option) => (\r\n        <button\r\n            type=\"button\"\r\n            onClick={() => clickFeedback(option)}\r\n            className={styles.btn}\r\n            key={option}\r\n        >\r\n            {makeFirstLetterBig(option)}\r\n        </button>\r\n    ));\r\n}\r\n\r\nfunction makeFirstLetterBig(str) {\r\n    if (!str) return str;\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n    clickFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul className={styles.list}>\r\n      <li className={styles.listItem}>\r\n        Good: <span className={styles.quantity}>{good}</span>\r\n      </li>\r\n      <li className={styles.listItem}>\r\n        Neutral: <span className={styles.quantity}>{neutral}</span>\r\n      </li>\r\n      <li className={styles.listItem}>\r\n        Bad: <span className={styles.quantity}>{bad}</span>\r\n      </li>\r\n      <li className={styles.listItem}>\r\n        Total: <span className={styles.quantity}>{total}</span>\r\n      </li>\r\n      <li className={styles.listItem}>\r\n        Positive feedback:{' '}\r\n        <span className={styles.quantity}>{positivePercentage}%</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n  };\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={styles.section}>\r\n      <h2 className={styles.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n  };\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className={styles.text}>{message}</p>;\r\n};\r\n\r\nNotification.defaultProps = {\r\n    message: 'No feedbacks yet',\r\n  };\r\n  \r\n  Notification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n  };\r\n\r\nexport default Notification;","import { React, useState } from 'react';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Section from './Section/Section';\r\nimport Notification from './Notification/Notification';\r\nimport s from '../Components/App.module.css'\r\n\r\nexport default function App() {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n\r\n    const countTotalFeedback = () => {\r\n        return good + neutral + bad;\r\n    };\r\n\r\n    const countPositiveFeedbackPercentage = () => {\r\n        const result = (good / countTotalFeedback()) * 100;\r\n        if (!result) {\r\n            return 0;\r\n        }\r\n        return Math.floor(result);\r\n    };\r\n\r\n    const addFeedback = (value) => {\r\n        switch (value.toLowerCase()) {\r\n            case \"good\":\r\n                setGood((state) => state + 1);\r\n\r\n                break;\r\n\r\n            case \"neutral\":\r\n                setNeutral((state) => state + 1);\r\n\r\n                break;\r\n\r\n            case \"bad\":\r\n                setBad((state) => state + 1);\r\n\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    return ( <\r\n        div className = { s.app } >\r\n        <\r\n        Section title = \"Please leave feedback\" >\r\n        <\r\n        FeedbackOptions options = {\r\n            [\"good\", \"neutral\", \"bad\"] }\r\n        addFeedback = { addFeedback }\r\n        /> <\r\n        /Section>\r\n\r\n        <\r\n        Section title = \"Statistics\" > {\r\n            countTotalFeedback() ? ( <\r\n                Statistics good = { good }\r\n                neutral = { neutral }\r\n                bad = { bad }\r\n                total = { countTotalFeedback() }\r\n                positivePercentage = { countPositiveFeedbackPercentage() }\r\n                />\r\n            ) : ( <\r\n                Notification message = \"No feedback given\" / >\r\n            )\r\n        } <\r\n        /Section> <\r\n        /div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}